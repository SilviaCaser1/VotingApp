# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
#  vote:
#    build: 
#     context: ./vote
#     target: dev
#    image: silviacaser/example-voting-app-vote:latest
#    depends_on:
#      redis:
#        condition: service_healthy
#    healthcheck: 
#      test: ["CMD", "curl", "-f", "http://vote:8080"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#      start_period: 10s
#    volumes:
#      - ./vote:/usr/local/app
#    ports:
#      - "5000:80"
#    networks:
#      - front-tier
#      - back-tier

  result:
    build: ./result
    image: silviacaser/example-voting-app-result:latest
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./result:/usr/local/app
    ports:
      - "5001:80"
      - "127.0.0.1:9229:9229"
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    image: silviacaser/example-voting-app-worker:latest
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    ports:
       - "5002:80"   
    networks:
      - back-tier

  selenium:
    image: selenium/standalone-chrome:latest
    container_name: selenium-grid
    ports:
      - "4444:4444"
      - "7900:7900"  # Para depuración visual si es necesario
    shm_size: 2g     # para evitar errores de memoria compartida con Chrome.
    networks:
      - front-tier
      - back-tier

  redis:
    image: redis:7.4.2
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - back-tier

  db:
    image: postgres:15
    container_name: votingapp-db-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: votingapp
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s       # intervalo entre chequeos
      retries: 5         # número de intentos
      start_period: 30s   # tiempo antes de comenzar los chequeos
    networks:
      - back-tier

 # seed:
 #   build: ./seed-data
 #   profiles: ["seed"]
 #   depends_on:
 #     vote:
 #       condition: service_healthy 
 #   networks:
 #     - front-tier
 #   restart: "no"

volumes:
  db-data:

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
