name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master   

jobs:
  build-and-push-docker-images:
    runs-on: ubuntu-latest  # Cambiado a Linux 

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar entorno para Python y ejecutar tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r vote/requirements.txt

      - name: Run Python unit tests
        run: |
          cd vote
          python -m unittest discover -s . -p "test_*.py"

      # Paso 3: Configurar entorno para Node.js y ejecutar tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node.js dependencies for `result`
        run: |
          cd result
          npm install

      - name: Add execution permissions
        run: |
          chmod +x ./result/node_modules/.bin/jest
 
      - name: Run Node.js unit tests for `result`
        run: |
          cd result
          npm test

      - name: Export Docker Username
      # Paso 4: Iniciar sesión en DockerHub
        run: |
          if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then
          echo "DOCKER_USERNAME is empty!"
          exit 1
          fi
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
      
      - name: Debug Variables
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
      
      # Paso 4: Iniciar sesión en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check DOCKER_USERNAME
        run: echo "DOCKER_USERNAME is ${{ secrets.DOCKER_USERNAME }}"

      # Paso 5: Construir y etiquetar imágenes Docker
      - name: Build Docker images individually
        run: |
          docker build -t example-voting-app-vote:latest ./vote
          docker build -t example-voting-app-result:latest ./result
          docker build -t example-voting-app-worker:latest ./worker

      - name: Tag Docker images
        run: |
          docker tag example-voting-app-vote:latest ${{ secrets.DOCKER_USERNAME }}/example-voting-app-vote:latest
          docker tag example-voting-app-result:latest ${{ secrets.DOCKER_USERNAME }}/example-voting-app-result:latest
          docker tag example-voting-app-worker:latest ${{ secrets.DOCKER_USERNAME }}/example-voting-app-worker:latest

      # Paso 6: Subir las imágenes a DockerHub
      - name: Push Docker images to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/example-voting-app-vote:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/example-voting-app-result:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/example-voting-app-worker:latest

  integration_tests:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-images  # Asegura que este trabajo solo se ejecute después del anterior
    env:
      VOTE_URL: "http://localhost:80"

    services:
      redis:
        image: redis:7.4.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-retries 5
          --health-timeout 2s
        
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
#        options: --user-data-dir=/tmp/selenium_user_data  # Usar un directorio temporal único 

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install selenium pytest webdriver-manager

      - name: Ver logs de Redis si falla
        if: failure()
        run: docker logs example-voting-app-redis-1 || true

      - name: Esperar a que Selenium esté listo
        run: sleep 10  # Espera 10 segundos antes de ejecutar las pruebas

      - name: Levantar contenedores de la aplicación
        run: |
          docker compose up -d

      - name: Esperar a que Redis esté listo
        run: |
          sleep 10    # Espera para evitar problemas de conexión
          until echo PING | nc -w 2 localhost 6379; do sleep 2; done
          
      - name: Esperar a que Postgres esté listo
        run: |
          sleep 10  # Da tiempo a Postgres para inicializarse
          until docker exec votingapp-db-1 pg_isready -U postgres; do sleep 2; done          
          
      - name: Verificar archivos de pruebas
        run: ls -R         
      
      - name: Ejecutar pruebas Selenium (Integración)
        run: |
          pytest integration_tests/test_selenium --disable-warnings -v --capture=tee-sys
          pytest result/tests/test_integration --disable-warnings -v --capture=tee-sys
          pytest vote/tests/test_integration --disable-warnings -v --capture=tee-sys
          pytest worker/tests/test_integration --disable-warnings -v --capture=tee-sys

